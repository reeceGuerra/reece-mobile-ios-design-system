name: SPM Test (reusable)

on:
  workflow_call:
    inputs:
      xcode_version:
        type: string
        default: "16.4"
      scheme:
        type: string
        default: "RDSUI"
      sdk:
        type: string
        default: "iphonesimulator"

jobs:
  test:
    name: Test (SPM on iOS Simulator)
    runs-on: macos-15
    env:
      SDK: ${{ inputs.sdk }}
      SCHEME: ${{ inputs.scheme }}

    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode ${{ inputs.xcode_version }}
        run: sudo xcode-select -s "/Applications/Xcode_${{ inputs.xcode_version }}.app/Contents/Developer"

      - name: Install xcpretty
        run: sudo gem install xcpretty --no-document

      - name: Cache SwiftPM
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Toolchain versions
        run: |
          swift --version
          xcodebuild -version

      # Fuerza modo Package: oculta temporalmente el .xcworkspace si existe
      - name: Temporarily hide workspace (force SPM mode)
        run: |
          if [ -d "ReeceDesignSystem.xcworkspace" ]; then
            mv ReeceDesignSystem.xcworkspace ReeceDesignSystem.xcworkspace.bak
            echo "Workspace hidden to force SPM build."
          fi

      - name: List SPM schemes (for debugging)
        run: xcodebuild -list

      - name: Resolve iOS Simulator destination
        id: resolve-destination
        run: |
          set -e
          xcrun simctl list devices available -j > devices.json
          DEST=$(python3 -c "import json; d=json.load(open('devices.json')); c=[(r, v.get('name',''), v['udid']) for r,devs in d.get('devices',{}).items() if 'iOS' in r for v in devs if v.get('isAvailable',True) and 'iPhone' in v.get('name','')]; c.sort(key=lambda t:(t[0],t[1])); r,name,udid=c[-1]; osver=r.split('.')[-1].replace('iOS-','').replace('-','.'); print(f'platform=iOS Simulator,OS={osver},id={udid}')")
          echo "DESTINATION=$DEST" >> "$GITHUB_ENV"
          echo "Resolved simulator DESTINATION=$DEST"

      # Solo test (construye en Debug y compila for testing)
      - name: Test (SPM on iOS Simulator, Debug)
        run: |
          set -eo pipefail
          xcodebuild \
            -scheme "$SCHEME" \
            -destination "$DESTINATION" \
            -sdk "$SDK" \
            -configuration Debug \
            -enableCodeCoverage YES \
            -skipPackagePluginValidation \
            test | xcpretty
