name: Release

on:
  push:
    tags:
      - 'v0.*'
  release:
    types: [created, published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (v0.x.y)'
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref || github.event.release.tag_name || inputs.tag }}
  cancel-in-progress: true

env:
  TAG_NAME: ${{ github.ref_type == 'tag' && github.ref_name || github.event.release.tag_name || inputs.tag }}
  WORKSPACE: ReeceDesignSystem.xcworkspace
  DESTINATION: platform=iOS Simulator,name=iPhone 15
  SDK: iphonesimulator

jobs:
  build-test:
    if: |
      startsWith(github.ref, 'refs/tags/v0.')
      || (github.event_name == 'release' && startsWith(github.event.release.tag_name, 'v0.'))
      || (github.event_name == 'workflow_dispatch' && startsWith(inputs.tag, 'v0.'))
    name: Build & Test (Xcode iOS Simulator)
    runs-on: macos-15

    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode 16.4
        run: sudo xcode-select -s "/Applications/Xcode_16.4.app/Contents/Developer"

      - name: Install xcpretty
        run: sudo gem install xcpretty --no-document

      - name: Cache SwiftPM
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Toolchain versions
        run: |
          swift --version
          xcodebuild -version

      - name: List schemes (for debugging)
        run: xcodebuild -list -workspace "$WORKSPACE"

      # âœ… Resuelve scheme sin heredoc (evita errores YAML)
      - name: Resolve scheme from workspace
        id: scheme
        run: |
          set -e
          xcodebuild -list -workspace "$WORKSPACE" -json > schemes.json
          SCHEME_RESOLVED=$(python3 -c "import json; d=json.load(open('schemes.json')); s=d.get('workspace',{}).get('schemes',[]); c=[x for x in s if x.endswith('-Package')] or [x for x in s if ('RDS' in x or 'Reece' in x)] or s; print(c[0] if c else '')")
          if [ -z "$SCHEME_RESOLVED" ]; then
            echo "::error::No shared schemes found in workspace $WORKSPACE"
            echo "Found JSON:" && cat schemes.json
            exit 1
          fi
          echo "Resolved scheme: $SCHEME_RESOLVED"
          echo "SCHEME=$SCHEME_RESOLVED" >> "$GITHUB_ENV"

      - name: Build (iOS Simulator)
        run: |
          set -eo pipefail
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -destination "$DESTINATION" \
            -sdk "$SDK" \
            -configuration Release \
            -skipPackagePluginValidation \
            build | xcpretty

      - name: Test (iOS Simulator)
        run: |
          set -eo pipefail
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -destination "$DESTINATION" \
            -sdk "$SDK" \
            -configuration Release \
            -enableCodeCoverage YES \
            -skipPackagePluginValidation \
            test | xcpretty

  github-release:
    needs: build-test
    if: |
      startsWith(github.ref, 'refs/tags/v0.')
      || (github.event_name == 'release' && startsWith(github.event.release.tag_name, 'v0.'))
      || (github.event_name == 'workflow_dispatch' && startsWith(inputs.tag, 'v0.'))
    name: GitHub Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Create or Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          generate_release_notes: true
          prerelease: true
          fail_on_unmatched_files: false
