name: Release

on:
  push:
    tags:
      - 'v0.*'
  release:
    types: [created, published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (v0.x.y)'
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref || github.event.release.tag_name || inputs.tag }}
  cancel-in-progress: true

env:
  TAG_NAME: ${{ github.ref_type == 'tag' && github.ref_name || github.event.release.tag_name || inputs.tag }}
  SDK: iphonesimulator
  SCHEME: RDSUI

jobs:
  build-test:
    if: |
      startsWith(github.ref, 'refs/tags/v0.')
      || (github.event_name == 'release' && startsWith(github.event.release.tag_name, 'v0.'))
      || (github.event_name == 'workflow_dispatch' && startsWith(inputs.tag, 'v0.'))
    name: Build & Test (SPM on iOS Simulator)
    runs-on: macos-15

    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode 16.4
        run: sudo xcode-select -s "/Applications/Xcode_16.4.app/Contents/Developer"

      - name: Install xcpretty
        run: sudo gem install xcpretty --no-document

      - name: Cache SwiftPM
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Toolchain versions
        run: |
          swift --version
          xcodebuild -version

      - name: List SPM schemes (for debugging)
        run: xcodebuild -list

      - name: Resolve iOS Simulator destination
        id: resolve-destination
        run: |
          set -e
          xcrun simctl list devices available -j > devices.json
          DEST=$(python3 -c "import json; d=json.load(open('devices.json')); c=[(r, v.get('name',''), v['udid']) for r,devs in d.get('devices',{}).items() if 'iOS' in r for v in devs if v.get('isAvailable',True) and 'iPhone' in v.get('name','')]; c.sort(key=lambda t:(t[0],t[1])); r,name,udid=c[-1]; osver=r.split('.')[-1].replace('iOS-','').replace('-','.'); print(f'platform=iOS Simulator,OS={osver},id={udid}')")
          echo "DESTINATION=$DEST" >> "$GITHUB_ENV"
          echo "Resolved simulator DESTINATION=$DEST"

      - name: Build (SPM)
        run: |
          set -eo pipefail
          xcodebuild \
            -scheme "$SCHEME" \
            -destination "$DESTINATION" \
            -sdk "$SDK" \
            -configuration Release \
            -skipPackagePluginValidation \
            build | xcpretty

      - name: Test (SPM on iOS Simulator)
        run: |
          set -eo pipefail
          xcodebuild \
            -scheme "$SCHEME" \
            -destination "$DESTINATION" \
            -sdk "$SDK" \
            -configuration Release \
            -enableCodeCoverage YES \
            -skipPackagePluginValidation \
            test | xcpretty

  github-release:
    needs: build-test
    if: |
      startsWith(github.ref, 'refs/tags/v0.')
      || (github.event_name == 'release' && startsWith(github.event.release.tag_name, 'v0.'))
      || (github.event_name == 'workflow_dispatch' && startsWith(inputs.tag, 'v0.'))
    name: GitHub Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create or Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          generate_release_notes: true
          prerelease: true
          fail_on_unmatched_files: false
